#include "./image_lib.h"
#include "../utility/utils.h"

std::map<int, std::array<std::array<unsigned char, 8>, 8>> ImageLib::table =
{
    { '0', util::toBinary({ 0x1C, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1C }) },
    { '1', util::toBinary({ 0x08, 0x18, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1C }) },
    { '2', util::toBinary({ 0x1C, 0x22, 0x02, 0x02, 0x1C, 0x20, 0x20, 0x3E }) },
    { '3', util::toBinary({ 0x1C, 0x22, 0x02, 0x1C, 0x02, 0x02, 0x22, 0x1C }) },
    { '4', util::toBinary({ 0x08, 0x18, 0x28, 0x48, 0x7C, 0x08, 0x08, 0x08 }) },
    { '5', util::toBinary({ 0x3E, 0x20, 0x20, 0x3E, 0x02, 0x02, 0x22, 0x1C }) },
    { '6', util::toBinary({ 0x1C, 0x22, 0x20, 0x3C, 0x22, 0x22, 0x22, 0x1C }) },
    { '7', util::toBinary({ 0x3E, 0x02, 0x04, 0x08, 0x10, 0x10, 0x10, 0x10 }) },
    { '8', util::toBinary({ 0x1C, 0x22, 0x22, 0x1C, 0x22, 0x22, 0x22, 0x1C }) },
    { '9', util::toBinary({ 0x1C, 0x22, 0x22, 0x22, 0x1E, 0x02, 0x22, 0x1C }) },

    { 'A', util::toBinary({ 0x00, 0x1C, 0x22, 0x22, 0x22, 0x3E, 0x22, 0x22 }) },
    { 'B', util::toBinary({ 0x00, 0x3C, 0x22, 0x22, 0x3E, 0x22, 0x22, 0x3C }) },
    { 'C', util::toBinary({ 0x00, 0x1C, 0x22, 0x20, 0x20, 0x20, 0x22, 0x1C }) },
    { 'D', util::toBinary({ 0x00, 0x3C, 0x22, 0x22, 0x22, 0x22, 0x22, 0x3C }) },
    { 'E', util::toBinary({ 0x00, 0x3E, 0x20, 0x20, 0x3E, 0x20, 0x20, 0x3E }) },
    { 'F', util::toBinary({ 0x00, 0x3E, 0x20, 0x20, 0x3E, 0x20, 0x20, 0x20 }) },
    { 'G', util::toBinary({ 0x00, 0x1C, 0x22, 0x20, 0x3E, 0x22, 0x22, 0x1C }) },
    { 'H', util::toBinary({ 0x00, 0x22, 0x22, 0x22, 0x3E, 0x22, 0x22, 0x22 }) },
    { 'I', util::toBinary({ 0x00, 0x1C, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1C }) },
    { 'J', util::toBinary({ 0x00, 0x3E, 0x08, 0x08, 0x08, 0x08, 0x28, 0x18 }) },
    { 'K', util::toBinary({ 0x00, 0x20, 0x2C, 0x30, 0x20, 0x30, 0x2C, 0x20 }) },
    { 'L', util::toBinary({ 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3E }) },
    { 'M', util::toBinary({ 0x00, 0x42, 0x66, 0x5A, 0x42, 0x42, 0x42, 0x42 }) },
    { 'n', util::toBinary({ 0x00, 0x00, 0x2C, 0x32, 0x22, 0x22, 0x22, 0x22 }) },
    { 'O', util::toBinary({ 0x00, 0x1C, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1C }) },
    { 'P', util::toBinary({ 0x00, 0x3C, 0x22, 0x22, 0x3C, 0x20, 0x20, 0x20 }) },
    { 'Q', util::toBinary({ 0x00, 0x1C, 0x22, 0x22, 0x22, 0x2A, 0x26, 0x1F }) },
    { 'R', util::toBinary({ 0x00, 0x38, 0x24, 0x24, 0x38, 0x30, 0x28, 0x24 }) },
    { 'S', util::toBinary({ 0x00, 0x1C, 0x22, 0x20, 0x1C, 0x02, 0x22, 0x1C }) },
    { 'T', util::toBinary({ 0x00, 0x3E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08 }) },
    { 'U', util::toBinary({ 0x00, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C }) },
    { 'V', util::toBinary({ 0x00, 0x22, 0x22, 0x22, 0x14, 0x14, 0x08, 0x00 }) },
    { 'W', util::toBinary({ 0x00, 0x41, 0x41, 0x49, 0x55, 0x55, 0x63, 0x41 }) },
    { 'X', util::toBinary({ 0x00, 0x00, 0x42, 0x24, 0x18, 0x18, 0x24, 0x42 }) },
    { 'Y', util::toBinary({ 0x00, 0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08 }) },
    { 'Z', util::toBinary({ 0x00, 0x3E, 0x02, 0x04, 0x08, 0x10, 0x20, 0x3E }) },

    { ' ', util::toBinary({ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }) },
    { '!', util::toBinary({ 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x08 }) },

    { Image_Fill , util::toBinary({ 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF }) }

};

bool ImageLib::exist(int key) {
    auto findIter = ImageLib::table.find(key);
    return findIter != ImageLib::table.end();
}

const std::array<std::array<unsigned char, 8>, 8>& ImageLib::get(int key) {
    auto findIter = ImageLib::table.find(key);
    if (findIter == ImageLib::table.end())
        return ImageLib::table[' '];
    else
        return findIter->second;
}

void ImageLib::validate(std::string& str) {
    for (auto iter = str.begin(); iter != str.end(); ) {
        char ch = *iter;
        if (ImageLib::exist(ch))
            ++iter;
        else if (ch >= 'a' && ch <= 'z') {
            *iter = ch - 32;
            ++iter;
        }
        else
            iter = str.erase(iter);
    }
}

