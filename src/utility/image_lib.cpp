#include "./image_lib.h"
#include "../utility/utils.h"

std::map<int, std::array<std::array<unsigned char, 8>, 8>> ImageLib::table =
{
    { Num_0, util::toBinary({ 0x1C, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1C }) },
    { Num_1, util::toBinary({ 0x08, 0x18, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1C }) },
    { Num_2, util::toBinary({ 0x1C, 0x22, 0x02, 0x02, 0x1C, 0x20, 0x20, 0x3E }) },
    { Num_3, util::toBinary({ 0x1C, 0x22, 0x02, 0x1C, 0x02, 0x02, 0x22, 0x1C }) },
    { Num_4, util::toBinary({ 0x08, 0x18, 0x28, 0x48, 0x7C, 0x08, 0x08, 0x08 }) },
    { Num_5, util::toBinary({ 0x3E, 0x20, 0x20, 0x3E, 0x02, 0x02, 0x22, 0x1C }) },
    { Num_6, util::toBinary({ 0x1C, 0x22, 0x20, 0x3C, 0x22, 0x22, 0x22, 0x1C }) },
    { Num_7, util::toBinary({ 0x3E, 0x02, 0x04, 0x08, 0x10, 0x10, 0x10, 0x10 }) },
    { Num_8, util::toBinary({ 0x1C, 0x22, 0x22, 0x1C, 0x22, 0x22, 0x22, 0x1C }) },
    { Num_9, util::toBinary({ 0x1C, 0x22, 0x22, 0x22, 0x1E, 0x02, 0x22, 0x1C }) },

    { Letter_A, util::toBinary({ 0x00, 0x1C, 0x22, 0x22, 0x22, 0x3E, 0x22, 0x22 }) },
    { Letter_B, util::toBinary({ 0x00, 0x3C, 0x22, 0x22, 0x3E, 0x22, 0x22, 0x3C }) },
    { Letter_C, util::toBinary({ 0x00, 0x1C, 0x22, 0x20, 0x20, 0x20, 0x22, 0x1C }) },
    { Letter_D, util::toBinary({ 0x00, 0x3C, 0x22, 0x22, 0x22, 0x22, 0x22, 0x3C }) },
    { Letter_E, util::toBinary({ 0x00, 0x3E, 0x20, 0x20, 0x3E, 0x20, 0x20, 0x3E }) },
    { Letter_F, util::toBinary({ 0x00, 0x3E, 0x20, 0x20, 0x3E, 0x20, 0x20, 0x20 }) },
    { Letter_G, util::toBinary({ 0x00, 0x1C, 0x22, 0x20, 0x3E, 0x22, 0x22, 0x1C }) },
    { Letter_H, util::toBinary({ 0x00, 0x22, 0x22, 0x22, 0x3E, 0x22, 0x22, 0x22 }) },
    { Letter_I, util::toBinary({ 0x00, 0x1C, 0x08, 0x08, 0x08, 0x08, 0x08, 0x1C }) },
    { Letter_J, util::toBinary({ 0x00, 0x3E, 0x08, 0x08, 0x08, 0x08, 0x28, 0x18 }) },
    { Letter_K, util::toBinary({ 0x00, 0x20, 0x2C, 0x30, 0x20, 0x30, 0x2C, 0x20 }) },
    { Letter_L, util::toBinary({ 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3E }) },
    { Letter_M, util::toBinary({ 0x00, 0x42, 0x66, 0x5A, 0x42, 0x42, 0x42, 0x42 }) },
    { Letter_n, util::toBinary({ 0x00, 0x00, 0x2C, 0x32, 0x22, 0x22, 0x22, 0x22 }) },
    { Letter_O, util::toBinary({ 0x00, 0x1C, 0x22, 0x22, 0x22, 0x22, 0x22, 0x1C }) },
    { Letter_P, util::toBinary({ 0x00, 0x3C, 0x22, 0x22, 0x3C, 0x20, 0x20, 0x20 }) },
    { Letter_Q, util::toBinary({ 0x00, 0x1C, 0x22, 0x22, 0x22, 0x2A, 0x26, 0x1F }) },
    { Letter_R, util::toBinary({ 0x00, 0x38, 0x24, 0x24, 0x38, 0x30, 0x28, 0x24 }) },
    { Letter_S, util::toBinary({ 0x00, 0x1C, 0x22, 0x20, 0x1C, 0x02, 0x22, 0x1C }) },
    { Letter_T, util::toBinary({ 0x00, 0x3E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08 }) },
    { Letter_U, util::toBinary({ 0x00, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C }) },
    { Letter_V, util::toBinary({ 0x00, 0x22, 0x22, 0x22, 0x14, 0x14, 0x08, 0x00 }) },
    { Letter_W, util::toBinary({ 0x00, 0x41, 0x41, 0x49, 0x55, 0x55, 0x63, 0x41 }) },
    { Letter_X, util::toBinary({ 0x00, 0x00, 0x42, 0x24, 0x18, 0x18, 0x24, 0x42 }) },
    //{ 'Y', util::toBinary({ 0x00, 0x22, 0x22, 0x14, 0x08, 0x10, 0x20, 0x00 }) },
    { Letter_Y, util::toBinary({ 0x00, 0x22, 0x22, 0x14, 0x08, 0x08, 0x08, 0x08 }) },
    { Letter_Z, util::toBinary({ 0x00, 0x3E, 0x02, 0x04, 0x08, 0x10, 0x20, 0x3E }) },

    { Space, util::toBinary({ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }) }
};

bool ImageLib::exist(int key) {
    auto findIter = ImageLib::table.find(key);
    return findIter != ImageLib::table.end();
}

const std::array<std::array<unsigned char, 8>, 8>& ImageLib::get(int key) {
    auto findIter = ImageLib::table.find(key);
    if (findIter == ImageLib::table.end())
        return ImageLib::table[' '];
    else
        return findIter->second;
}

void ImageLib::validate(std::string& str) {
    for (auto iter = str.begin(); iter != str.end(); ) {
        char ch = *iter;
        if (ImageLib::exist(ch))
            ++iter;
        else if (ch >= 'a' && ch <= 'z') {
            *iter = ch - 32;
            ++iter;
        }
        else
            iter = str.erase(iter);
    }
}

